Foundations of Programming: Object-Oriented Design

Most modern programming languages, such as Java, C#, Ruby, and Python, are object-oriented languages, which help group individual bits of code into a complex and coherent application. However, object-orientation itself is not a language; it's simply a set of ideas and concepts.

Let Simon Allardice introduce you to the termsΓÇöwords like abstraction, inheritance, polymorphism, subclassΓÇöand guide you through defining your requirements and identifying use cases for your program. The course also covers creating conceptual models of your program with design patterns, class and sequence diagrams, and unified modeling language (UML) tools, and then shows how to convert the diagrams into code.
Topics include:

    Why use object-oriented design (OOD)?
    Pinpointing use cases, actors, and scenarios
    Identifying class responsibilities and relationships
    Creating class diagrams
    Using abstract classes
    Working with inheritance
    Creating advanced UML diagrams
    Understanding object-oriented design principles
 
http://www.lynda.com/Programming-tutorials/Foundations-of-Programming-Object-Oriented-Design/96949-2.html